%require "3.2"
%language "c++"

%define api.namespace {voila::parser}
%define api.parser.class {Parser}
%define api.value.type variant
%define api.token.constructor
%define parse.assert
%define parse.error verbose

%{
	#include "ASTNodes.hpp"
	#include <unordered_set>
	using namespace voila::ast;
%}

%debug
%defines
%output "src/voila_parser.cpp"
%defines "include/voila_parser.hpp"
%locations
%define api.location.file "../include/location.hpp"

%code requires {
	namespace voila::lexer {
		class Lexer; // Generated by reflex with namespace=voila lexer=Lexer lex=yylex
	}
}
%parse-param { voila::lexer::Lexer& lexer } // Construct parser object with lexer

%code {
	#include <iostream>
	#include <cstdlib>
	#include <fstream>
	#include <string>
	#include <cinttypes>
	#include <vector>
	#include "voila_lexer.hpp"
	#undef yylex
	#define yylex lexer.lex // Within bison's parse() we should invoke lexer.yylex(), not the global yylex()
}

%define api.token.prefix {TOK_}

/* special chars */
%token BAR "|"
%token COLON ";"
%token COMMA ","
%token LPAREN "("
%token RPAREN ")"
%token LBRACE "{"
%token RBRACE "}"
%token LBRACKET "["
%token RBRACKET "]"

/* literals */
%token TRUE "true"
%token FALSE "false"

/* special functions */
%token LOOP "loop"
%token FUNCTION "function definition"
%token EMIT "emit"
%token MAIN "main function"

/* comparison */
%token EQ "equals" 
%token NEQ "not equals"
%token LE "less"
%token LEQ "less equals"
%token GE "greater"
%token GEQ "greater equals"

/* arithmetic */
%token ADD "addition"
%token SUB "subtraction"
%token MUL "multiplication"
%token DIV "division"
%token MOD "modulo"

/* logical */
%token AND "and"
%token OR "or"
%token NOT "not"

/* TODO: unary operators */
%token HASH "hash"
%token SELECT "matching selection"

/* binary operators */
%token GATHER "gather"
%token READ "read"
/* ternary operators */
%token SCATTER "scatter"
%token WRITE "write"
/* aggregates */
%token AGGR "aggregation"
%token SUM "sum"
%token CNT "count"
%token MIN "min"
%token MAX "max"
%token AVG "average"
/* TODO hash table ops */

%nonassoc ASSIGN "assignment"

%token <intmax_t> INT "integer"
%token <double> FLT "decimal"
%token <std::string> ID "identifier"
%token <std::string> STR "string literal"

%nterm <std::vector<Statement>> stmts; 
%nterm <std::vector<Expression>> expr_list;
%nterm <std::vector<Fun>> program;
%nterm <std::unordered_set<std::string>> IDs;
%nterm <Statement> stmt;
%nterm <Expression> expr;
%nterm <Fun> func;
%nterm <Main> main;
%nterm <Const> constant; 
%nterm <std::shared_ptr<Expression>> pred;
%nterm <Statement> effect;
%nterm <Arithmetic> arithmetic;
%nterm <Comparison> comparison;
%nterm <Selection> selection;
%nterm <Logical> logical;
%nterm <Fun> read_op;

%%
program: 
	%empty { }
	| program func { $$ = $1; $$.emplace_back($2); }
	| program main { $$ = $1; $$.emplace_back($2); } //TODO: main function is singleton

func: FUNCTION ID LPAREN IDs RPAREN LBRACE stmts RBRACE { $$ = Fun($2, $4, $7); }

main: MAIN LBRACE stmts RBRACE { $$ = Main($3); }

stmts:
	%empty { }
	| stmts stmt { $$ = $1; $$.push_back($2); }

stmt: expr COLON { $$ = $1; }
	| ID ASSIGN expr COLON { $$ = Assign($1, $3); }
	| LOOP pred LBRACE stmts RBRACE { $$ = Loop($2, $4); }
	| EMIT expr COLON { $$ = Emit($2); }
	| effect COLON { $$ = $1; }
	| effect COLON pred { $$ = $1; $$.predicate($3); }
	| ID LPAREN expr RPAREN COLON { $$ = FunctionCall($1, $3); }

	/* aggregate ( result_store, variable with predicate as aggregation filter, vector_to_aggregate) */
effect :
	AGGR LPAREN SUM COMMA ID COMMA expr COMMA expr RPAREN { $$ = Statement::make<AggrGSum>($5, $7, $9); } /* maybe we restrict the expressions to more specialized predicates or tuple get in the parser to safe some correctness check effort later on */
	| AGGR LPAREN CNT COMMA ID COMMA expr COMMA expr RPAREN { $$ = Statement::make<AggrGCount>($5, $7, $9); }
	| AGGR LPAREN AVG COMMA ID COMMA expr COMMA expr RPAREN { $$ = Statement::make<AggrGAvg>($5, $7, $9); }
	| AGGR LPAREN MIN COMMA ID COMMA expr COMMA expr RPAREN { $$ = Statement::make<AggrGMin>($5, $7, $9); }
	| AGGR LPAREN MAX COMMA ID COMMA expr COMMA expr RPAREN { $$ = Statement::make<AggrGMax>($5, $7, $9); }
	| SCATTER LPAREN ID COMMA expr COMMA expr RPAREN { $$ = Scatter($3, $5, $7); } /* dest, idxs with pred, src */
	| WRITE LPAREN ID COMMA expr COMMA ID RPAREN { $$ = Write($3, $5, $7, nullptr); } /* dest, start_idx, src */

pred: BAR ID { $$ = Ref(ID); }

selection:
	SELECT LPAREN expr RPAREN { $$ = Selection($3); }

expr: 
	constant { $$ = $1; }
	| ID { $$ = Ref($1); }
	| ID LBRACKET INT RBRACKET { $$ = TupleGet($1, $3); }
	| LPAREN expr_list RPAREN { $$ = TupleCreate($2); } /* recursive tuples do not look like a good idea */
	| expr pred { $$ = $1; $$.predicate($2); }
	| arithmetic {$$ = $1; }
	| comparison {$$ = $1; }
	| logical {$$ = $1; }
	| read_op {$$ = $1; }
	| selection { $$ = $1; }

constant:
	TRUE { $$ = Const(true); }
	| FALSE { $$ = Const(false); }
	| INT { $$ = Const($1); }
	| FLT { $$ = Const($1); }
	| STR { $$ = Const($1); }

arithmetic :
	ADD LPAREN expr COMMA expr RPAREN {$$ = Arithmetic(Arithmetic::Operation::ADD, $3, $5); }
	| SUB LPAREN expr COMMA expr RPAREN {$$ = Arithmetic(Arithmetic::Operation::SUB, $3, $5); }
	| MUL LPAREN expr COMMA expr RPAREN {$$ = Arithmetic(Arithmetic::Operation::MUL, $3, $5); }
	| DIV LPAREN expr COMMA expr RPAREN {$$ = Arithmetic(Arithmetic::Operation::DIV, $3, $5); }
	| MOD LPAREN expr COMMA expr RPAREN {$$ = Arithmetic(Arithmetic::Operation::MOD, $3, $5); }

comparison : 
	EQ LPAREN expr COMMA expr RPAREN {$$ = Comparison(Comparison::Operation::EQ, $3, $5); }
	| NEQ LPAREN expr COMMA expr RPAREN {$$ = Comparison(Comparison::Operation::NEQ, $3, $5); }
	| LE LPAREN expr COMMA expr RPAREN {$$ = Comparison(Comparison::Operation::LE, $3, $5); }
	| LEQ LPAREN expr COMMA expr RPAREN {$$ = Comparison(Comparison::Operation::LEQ, $3, $5); }
	| GE LPAREN expr COMMA expr RPAREN {$$ = Comparison(Comparison::Operation::GE, $3, $5); }
	| GEQ LPAREN expr COMMA expr RPAREN {$$ = Comparison(Comparison::Operation::GEQ, $3, $5); }

logical:
	AND LPAREN expr COMMA expr RPAREN {$$ = Comparison(Logical::Operation::AND, $3, $5); }
 	| OR LPAREN expr COMMA expr RPAREN {$$ = Comparison(Logical::Operation::OR, $3, $5); }
 	| NOT LPAREN expr RPAREN {$$ = Comparison(Logical::Operation::NOT, $3); }

read_op:
	GATHER LPAREN expr COMMA expr RPAREN { $$ = Gather($3, $5); }
	| READ LPAREN expr COMMA expr RPAREN { $$ = Read($3, $5); }

expr_list: 
	%empty { }
	| expr_list COMMA expr { $$ = $1; $$.push_back($3); }

IDs :
	%empty { }
	| IDs COMMA ID {$$ = $1; $$.insert($3); }
%%


void voila::parser::Parser::error(const location& loc, const std::string& msg)
{
	std::cerr << loc << ": " << msg << std::endl;
	if (lexer.size() == 0) // if token is unknown (no match)
		lexer.matcher().winput(); // skip character
}