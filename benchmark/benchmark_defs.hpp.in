#pragma once
#define VOILA_BENCHMARK_SOURCES_PATH "${CMAKE_CURRENT_SOURCE_DIR}/queries"
#define VOILA_BENCHMARK_DATA_PATH "${CMAKE_CURRENT_SOURCE_DIR}/data"
#include <cstddef>
#include <cstdint>
#include <tuple>
#include <type_traits>

enum part_cols : size_t
{
    P_PARTKEY,
    P_NAME,
    P_MFGR,
    P_BRAND,
    P_TYPE,
    P_SIZE,
    P_CONTAINER,
    P_RETAILPRICE,
    P_COMMENT
};

enum supplier_cols : size_t
{
    S_SUPPKEY,
    S_NAME,
    S_ADDRESS,
    S_NATIONKEY,
    S_PHONE,
    S_ACCTBAL,
    S_COMMENT
};

enum partsupp_cols : size_t
{
    PS_PARTKEY,
    PS_SUPPKEY,
    PS_AVAILQTY,
    PS_SUPPLYCOST,
    PS_COMMENT
};

enum customer_cols : size_t
{
    C_CUSTKEY,
    C_NAME,
    C_ADDRESS,
    C_NATIONKEY,
    C_PHONE,
    C_ACCTBAL,
    C_MKTSEGMENT,
    C_COMMENT
};

enum orders_cols : size_t
{
    O_ORDERKEY,
    O_CUSTKEY,
    O_ORDERSTATUS,
    O_TOTALPRICE,
    O_ORDERDATE,
    O_ORDERPRIORITY,
    O_CLERK,
    O_SHIPPRIORITY,
    O_COMMENT
};

enum lineitem_cols : size_t
{
    L_ORDERKEY,
    L_PARTKEY,
    L_SUPPKEY,
    L_LINENUMBER,
    L_QUANTITY,
    L_EXTENDEDPRICE,
    L_DISCOUNT,
    L_TAX,
    L_RETURNFLAG,
    L_LINESTATUS,
    L_SHIPDATE,
    L_COMMITDATE,
    L_RECEIPTDATE,
    L_SHIPINSTRUCT,
    L_SHIPMODE,
    L_COMMENT
};

enum nation_cols : size_t
{
    N_NATIONKEY,
    N_NAME,
    N_REGIONKEY,
    N_COMMENT
};

enum region_cols : size_t
{
    R_REGIONKEY,
    R_NAME,
    R_COMMENT
};

std::tuple<int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, double, int32_t> part_types;
template<part_cols col>
using part_types_t = std::decay_t<decltype(std::get<col>(part_types))>;

std::tuple<int32_t, int32_t, int32_t, int32_t, int32_t, double, int32_t> supplier_types;
template<supplier_cols col>
using supplier_types_t = std::decay_t<decltype(std::get<col>(supplier_types))>;

std::tuple<int32_t, int32_t, int32_t, double, int32_t> partsupp_types;
template<partsupp_cols col>
using partsupp_types_t = std::decay_t<decltype(std::get<col>(partsupp_types))>;

std::tuple<int32_t, int32_t, int32_t, int32_t, int32_t, double, int32_t, int32_t> customer_types;
template<customer_cols col>
using customer_types_t = std::decay_t<decltype(std::get<col>(customer_types))>;

std::tuple<int32_t, int32_t, int32_t, double, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t> orders_types;
template<orders_cols col>
using orders_types_t = std::decay_t<decltype(std::get<col>(orders_types))>;

std::tuple<int32_t,
           int32_t,
           int32_t,
           int32_t,
           double,
           double,
           double,
           double,
           int32_t,
           int32_t,
           int32_t,
           int32_t,
           int32_t,
           int32_t,
           int32_t,
           int32_t>
    lineitem_types;
template<lineitem_cols col>
using lineitem_types_t = std::decay_t<decltype(std::get<col>(lineitem_types))>;

std::tuple<int32_t, int32_t, int32_t, int32_t> nation_types;
template<nation_cols col>
using nation_types_t = std::decay_t<decltype(std::get<col>(nation_types))>;

std::tuple<int32_t, int32_t, int32_t> region_types;
template<region_cols col>
using region_types_t = std::decay_t<decltype(std::get<col>(region_types))>;
